{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/Input/Input.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","Input","errorMessage","inputName","value","error","onChange","onBlur","classNames","type","name","placeholder","initialState","inputs","errors","NewMovie","state","handleSubmit","event","preventDefault","onAdd","props","setState","validateInput","target","trim","match","prevState","handleChange","this","isFormInvalid","onSubmit","disabled","Component","App","moviesFromServer","addMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bbe35caf.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const Input = ({ inputName, value, error, onChange, onBlur }) => {\n  let errorMessage;\n\n  if (error === 'empty') {\n    errorMessage = 'this field can not be empty';\n  } else if (error === 'invalid') {\n    errorMessage = 'this field must be an url';\n  }\n\n  return (\n    <div className=\"NewMovie__input-field\">\n      <input\n        className={\n          classNames(\n            'NewMovie__input',\n            {\n              'NewMovie__input--invalid':\n                error === 'invalid'\n                || error === 'empty',\n            },\n          )\n        }\n        type=\"text\"\n        name={inputName}\n        placeholder={inputName}\n        value={value}\n        onChange={onChange}\n        onBlur={onBlur}\n      />\n\n      <p className=\"NewMovie__error\">\n        {errorMessage}\n      </p>\n    </div>\n  );\n};\n\nInput.propTypes = {\n  inputName: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  error: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onBlur: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Input } from '../Input';\nimport './NewMovie.scss';\n\nconst initialState = {\n  inputs: {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  },\n  errors: {\n    title: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  },\n};\n\nexport class NewMovie extends Component {\n  state = { ...initialState }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { onAdd } = this.props;\n    const { inputs } = this.state;\n\n    onAdd({ inputs });\n\n    this.setState({ ...initialState });\n  }\n\n  validateInput = (event) => {\n    const { name, value } = event.target;\n    const valueToCheck = value.trim();\n\n    if (!valueToCheck) {\n      this.setState((prevState) => {\n        const newErrorState = {\n          ...prevState.errors,\n          [name]: 'empty',\n        };\n\n        return { errors: newErrorState };\n      });\n\n      return;\n    }\n\n    // eslint-disable-next-line max-len\n    const urlRegex = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\n    if ((name === 'imgUrl' || name === 'imdbUrl') && !value.match(urlRegex)) {\n      this.setState((prevState) => {\n        const newErrorState = {\n          ...prevState.errors,\n          [name]: 'invalid',\n        };\n\n        return { errors: newErrorState };\n      });\n\n      return;\n    }\n\n    this.setState((prevState) => {\n      const newErrorState = {\n        ...prevState.errors,\n        [name]: 'valid',\n      };\n\n      return {\n        errors: newErrorState,\n      };\n    });\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState((prevState) => {\n      const newValue = {\n        ...prevState.inputs,\n        [name]: value,\n      };\n\n      return { inputs: newValue };\n    });\n  }\n\n  render() {\n    const {\n      inputs,\n      errors,\n    } = this.state;\n\n    const isFormInvalid = errors.title !== 'valid' || !inputs.title\n      || errors.imgUrl !== 'valid' || !inputs.imgUrl\n      || errors.imdbUrl !== 'valid' || !inputs.imdbUrl\n      || errors.imdbId !== 'valid' || !inputs.imdbId;\n\n    return (\n      <form\n        className=\"NewMovie\"\n        name=\"newMovie\"\n        onSubmit={this.handleSubmit}\n      >\n\n        <Input\n          inputName=\"title\"\n          value={inputs.title}\n          onChange={this.handleChange}\n          onBlur={this.validateInput}\n          error={errors.title}\n        />\n\n        <input\n          className=\"NewMovie__input\"\n          type=\"text\"\n          name=\"description\"\n          placeholder=\"description\"\n          value={inputs.description}\n          onChange={this.handleChange}\n        />\n\n        <Input\n          inputName=\"imgUrl\"\n          value={inputs.imgUrl}\n          onChange={this.handleChange}\n          onBlur={this.validateInput}\n          error={errors.imgUrl}\n        />\n\n        <Input\n          inputName=\"imdbUrl\"\n          value={inputs.imdbUrl}\n          onChange={this.handleChange}\n          onBlur={this.validateInput}\n          error={errors.imdbUrl}\n        />\n\n        <Input\n          inputName=\"imdbId\"\n          value={inputs.imdbId}\n          onChange={this.handleChange}\n          onBlur={this.validateInput}\n          error={errors.imdbId}\n        />\n\n        <button\n          className=\"NewMovie__submit\"\n          type=\"submit\"\n          disabled={isFormInvalid}\n        >\n          Add\n        </button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(prevState => (\n      { movies: [...prevState.movies, movie] }\n    ));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie\n            onAdd={this.addMovie}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}